// Generated by CoffeeScript 1.4.0
(function() {
  var GP4InputStream, GTPInputStream, Song, TGMeasureHeader, bufferArray, fileStream, fs, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  GTPInputStream = require('./GTPInputStream').GTPInputStream;

  fs = require('fs');

  util = require('util');

  TGMeasureHeader = (function() {

    function TGMeasureHeader() {}

    TGMeasureHeader.TRIPLET_FEEL_NONE = 1;

    TGMeasureHeader.TRIPLET_FEEL_EIGHTH = 2;

    TGMeasureHeader.TRIPLET_FEEL_SIXTEENTH = 3;

    return TGMeasureHeader;

  })();

  Song = (function() {

    function Song() {}

    Song.measureHeaders = [];

    Song.tracks = [];

    return Song;

  })();

  GP4InputStream = (function(_super) {
    var song;

    __extends(GP4InputStream, _super);

    function GP4InputStream() {
      return GP4InputStream.__super__.constructor.apply(this, arguments);
    }

    song = new Song;

    GP4InputStream.prototype.readSong = function() {
      var channels, lyric, lyricTrack, measures, tempoValue, tracks;
      song.version = this.readVersion();
      if (!/FICHIER GUITAR PRO v4.*/.test(song.version)) {
        return console.log('not suport format');
      }
      song.Info = this.readInfo();
      this.tripletFeel = this.readBoolean() ? TGMeasureHeader.TRIPLET_FEEL_EIGHTH : TGMeasureHeader.TRIPLET_FEEL_NONE;
      lyricTrack = this.readInt();
      lyric = this.readLyrics();
      tempoValue = this.readInt();
      song.key = this.readInt();
      song.octave = this.readByte();
      channels = this.readChannels();
      measures = this.readInt();
      tracks = this.readInt();
      song.measureHeaders = this.readMeasureHeaders(measures);
      song.tracks = this.readTracks(tracks, channels, lyric, lyricTrack);
      song.measures = this.readMeasures(measures, tracks, tempoValue);
      return song;
    };

    GP4InputStream.prototype.readInfo = function() {
      var comments, _results;
      song.name = this.readStringByteSizeOfInteger();
      song.subtitle = this.readStringByteSizeOfInteger();
      song.artist = this.readStringByteSizeOfInteger();
      song.album = this.readStringByteSizeOfInteger();
      song.author = this.readStringByteSizeOfInteger();
      song.copyright = this.readStringByteSizeOfInteger();
      song.writer = this.readStringByteSizeOfInteger();
      song.afterWriter = this.readStringByteSizeOfInteger();
      comments = this.readInt();
      song.comments = [];
      _results = [];
      while (comments > 0) {
        song.comments.push(this.readStringByteSizeOfInteger());
        _results.push(comments--);
      }
      return _results;
    };

    GP4InputStream.prototype.readLyrics = function() {
      return console.log('fuck lyric');
    };

    GP4InputStream.prototype.readMeasureHeaders = function(count) {
      var measureHeaders;
      measureHeaders = [];
      while (count > 0) {
        measureHeaders.push(readMeasureHeader(count + 1));
        count--;
      }
      return song.measureHeaders = measureHeaders;
    };

    GP4InputStream.prototype.readTracks = function(count) {
      var _results;
      song.tracks = [];
      _results = [];
      while (count > 0) {
        _results.push(song.tracks.push(readTrack(number)));
      }
      return _results;
    };

    GP4InputStream.prototype.readMeasures = function() {};

    GP4InputStream.prototype.readLyrics = function() {
      var i, lyric;
      lyric = {};
      lyric.form = this.readInt();
      lyric.lyrics = this.readStringInteger();
      i = 4;
      while (i > 0) {
        this.readInt();
        this.readStringInteger();
        i--;
      }
      return song.lyric = lyric;
    };

    GP4InputStream.prototype.readChannels = function() {};

    GP4InputStream.prototype.readBeat = function() {};

    GP4InputStream.prototype.readText = function() {};

    GP4InputStream.prototype.readDuration = function() {};

    GP4InputStream.prototype.getTiedNoteValue = function() {};

    GP4InputStream.prototype.readColor = function() {};

    GP4InputStream.prototype.readMarker = function() {};

    GP4InputStream.prototype.readMeasureHeader = function() {};

    GP4InputStream.prototype.readMeasure = function() {};

    GP4InputStream.prototype.readNote = function() {};

    GP4InputStream.prototype.readTrack = function() {};

    GP4InputStream.prototype.readChanel = function() {};

    GP4InputStream.prototype.parseRepeatAlternative = function() {};

    GP4InputStream.prototype.readChord = function() {};

    GP4InputStream.prototype.readGrace = function() {};

    GP4InputStream.prototype.readBend = function() {};

    GP4InputStream.prototype.readTremoloBar = function() {};

    GP4InputStream.prototype.readTremoloPicking = function() {};

    GP4InputStream.prototype.readNoteEffects = function() {};

    GP4InputStream.prototype.readBeatEffects = function() {};

    GP4InputStream.prototype.readMixChange = function() {};

    GP4InputStream.prototype.toStrokeValue = function() {};

    GP4InputStream.prototype.toChanelShort = function() {};

    GP4InputStream.prototype.getClef = function() {};

    return GP4InputStream;

  })(GTPInputStream);

  fileStream = fs.createReadStream('../sample/FadeToBlack.gp4');

  bufferArray = [];

  fileStream.on('data', function(data) {
    return bufferArray.push(data);
  });

  fileStream.on('end', function() {
    var gtpBuffer, gtpReader;
    gtpBuffer = Buffer.concat(bufferArray);
    gtpReader = new GP4InputStream(gtpBuffer);
    gtpReader.init();
    return console.log(gtpReader.readSong());
  });

}).call(this);
