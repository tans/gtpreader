// Generated by CoffeeScript 1.4.0
(function() {
  var GP4InputStream, GTPInputStream, Song, TGMeasureHeader, bufferArray, fileStream, fs, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  GTPInputStream = require('./GTPInputStream').GTPInputStream;

  fs = require('fs');

  util = require('util');

  TGMeasureHeader = (function() {

    function TGMeasureHeader() {}

    TGMeasureHeader.TRIPLET_FEEL_NONE = 1;

    TGMeasureHeader.TRIPLET_FEEL_EIGHTH = 2;

    TGMeasureHeader.TRIPLET_FEEL_SIXTEENTH = 3;

    return TGMeasureHeader;

  })();

  Song = (function() {
    var measureHeaders;

    function Song() {}

    Song(measureHeaders = [], Song.tracks = []);

    return Song;

  })();

  GP4InputStream = (function(_super) {
    var song;

    __extends(GP4InputStream, _super);

    function GP4InputStream() {
      return GP4InputStream.__super__.constructor.apply(this, arguments);
    }

    song = new Song;

    GP4InputStream.prototype.readSong = function() {
      var channels, lyric, lyricTrack, measures, tempoValue, tracks;
      song.version = this.readVersion();
      if (!/FICHER GUITAR PRO v4*/.match(song.version)) {
        return console.log('not suport format');
      }
      song.Info = readInfo();
      this.tripletFeel = readBoolean() ? TGMeasureHeader.TRIPLET_FEEL_EIGHTH : TGMeasureHeader.TRIPLET_FEEL_NONE;
      lyricTrack = readInt();
      lyric = readLyrics();
      tempoValue = readInt();
      readInt();
      beadByte();
      channels = readChannels();
      measures = readInt();
      tracks = readInt();
      song.measureHeaders = readMeasureHeaders(measures);
      song.tracks = readTracks(tracks, channels, lyric, lyricTrack);
      song.measures = readMeasures(measures, tracks, tempoValue);
      return song;
    };

    GP4InputStream.prototype.readInfo = function() {
      return song.name = readStringByteSizeOfInteger();
    };

    GP4InputStream.prototype.readLyrics = function() {
      return console.log('fuck lyric');
    };

    GP4InputStream.prototype.readMeasureHeaders = function() {};

    GP4InputStream.prototype.readTracks = function() {};

    GP4InputStream.prototype.readMeasures = function() {};

    GP4InputStream.prototype.readLyrics = function() {};

    GP4InputStream.prototype.readChannels = function() {};

    GP4InputStream.prototype.readBeat = function() {};

    GP4InputStream.prototype.readText = function() {};

    GP4InputStream.prototype.readDuration = function() {};

    GP4InputStream.prototype.getTiedNoteValue = function() {};

    GP4InputStream.prototype.readColor = function() {};

    GP4InputStream.prototype.readMarker = function() {};

    GP4InputStream.prototype.readMeasureHeaders = function() {};

    GP4InputStream.prototype.readMeasure = function() {};

    GP4InputStream.prototype.readNote = function() {};

    GP4InputStream.prototype.readTrack = function() {};

    GP4InputStream.prototype.readChanel = function() {};

    GP4InputStream.prototype.parseRepeatAlternative = function() {};

    GP4InputStream.prototype.readChord = function() {};

    GP4InputStream.prototype.readGrace = function() {};

    GP4InputStream.prototype.readBend = function() {};

    GP4InputStream.prototype.readTremoloBar = function() {};

    GP4InputStream.prototype.readTremoloPicking = function() {};

    GP4InputStream.prototype.readNoteEffects = function() {};

    GP4InputStream.prototype.readBeatEffects = function() {};

    GP4InputStream.prototype.readMixChange = function() {};

    GP4InputStream.prototype.toStrokeValue = function() {};

    GP4InputStream.prototype.toChanelShort = function() {};

    GP4InputStream.prototype.getClef = function() {};

    return GP4InputStream;

  })(GTPInputStream);

  debugger;

  fileStream = fs.createReadStream('sample/FadeToBlack.gp4');

  bufferArray = [];

  fileStream.on('data', function(data) {
    return bufferArray.push(data);
  });

  fileStream.on('end', function() {
    var gtpBuffer, gtpReader;
    gtpBuffer = Buffer.concat(bufferArray);
    gtpReader = new GP4InputStream(gtpBuffer);
    gtpReader.init();
    gtpReader.readSong();
    return console.log(SONG);
  });

}).call(this);
